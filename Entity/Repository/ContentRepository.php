<?php

namespace Manhattan\Bundle\ContentBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends NestedTreeRepository
{
    private $publishState = 1;

    /**
     * Generated Query Example :
     * SELECT page.* FROM page, page AS page2, page AS page1
     *   WHERE page.SLUG= 'three' AND page.TREE_LEVEL=3
     *   AND (page2.SLUG='two'
     *     AND (page.TREE_LEVEL = (page2.TREE_LEVEL + 1)
     *     AND page.TREE_LEVEL = 3
     *     AND page.TREE_LEFT BETWEEN page2.TREE_LEFT AND page2.TREE_RIGHT))
     *   AND (page1.SLUG='one'
     *     AND (page2.TREE_LEVEL = (page1.TREE_LEVEL + 1)
     *     AND page2.TREE_LEVEL = 2
     *     AND page2.TREE_LEFT BETWEEN page1.TREE_LEFT AND page1.TREE_RIGHT))
     *   LIMIT 1;
     */

    /**
     * Returns Content from position in tree
     *
     * @param  string  $slug
     * @return Content
     */
	public function findOneBySlugInTree($slug)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT content, document, image FROM ManhattanContentBundle:Content content
                LEFT JOIN content.images image
                LEFT JOIN content.documents document
                WHERE content.lvl = 0
                    AND content.slug = :slug
                    AND content.publishState = :publishState
                ORDER BY content.root, content.lft ASC'
            )->setParameters(array(
                'slug' => $slug,
                'publishState' => $this->getPublishState()
            ));

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Returns Content from position in tree
     *
     * @param  string $slug_one
     * @param  string $slug_two
     * @return Content
     */
	public function findOneByTwoSlugsInTree($slug_one, $slug_two)
	{
		$query = $this->getEntityManager()
            ->createQuery('
                SELECT content, parent, document, image FROM ManhattanContentBundle:Content content
                LEFT JOIN content.images image
                LEFT JOIN content.documents document
                LEFT JOIN content.parent parent
                WHERE content.lvl = 1 AND content.slug = :slug_two
                    AND content.publishState = :publishState
                	AND (parent.slug = :slug_one
                        AND parent.publishState = :publishState
                		AND (content.lvl = (parent.lvl + 1)
                		AND content.lft > parent.lft
                		AND content.lft < parent.rgt))'
            )->setParameters(array(
                'slug_one' => $slug_one,
                'slug_two' => $slug_two,
                'publishState' => $this->getPublishState()
            ));

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
	}

    /**
     * Returns Content with joined Documents
     *
     * @param  int     $id
     * @return Content
     */
    public function findOneByIdJoinDocuments($id)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT content, document, image FROM ManhattanContentBundle:Content content
                LEFT JOIN content.documents document
                LEFT JOIN content.images image
                WHERE content.id = :id'
            )->setParameters(array(
                'id' => $id
        ));

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Returns page query for displaying all Pages
     *
     * @return Doctrine\ORM\Query
     */
    public function getPageQuery()
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT content, document, image FROM ManhattanContentBundle:Content content
                LEFT JOIN content.documents document
                LEFT JOIN content.images image
                WHERE page.publishState = :publishState
                ORDER BY page.root, page.lft ASC'
            )->setParameter('publishState', $this->getPublishState());

        return $query;
    }

    public function findPublishedNodesForDisplay(array $options = array())
    {
        return $this->buildTree($this->getPageQuery()->getArrayResult(), $options);
    }

    /**
     * Sets Publish State to be returned from query
     *
     * @param  int     $publishState
     * @return Content
     */
    public function setPublishState($publishState)
    {
        $this->publishState = $publishState;

        return $this;
    }

    public function getPublishState()
    {
        return $this->publishState;
    }

}
